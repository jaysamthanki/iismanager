@page
@using Techie.IISManager.Structures
@using Techie.IISManager.TypeCodes
@model DefaultModel
@{
  ViewData["Title"] = "Home page";
}

@section Scripts
{
  <script type="text/javascript">
    var currentSite = null;

    function pageLoad()
    {
      setupEvents();
      setupTables();
    }

    function setupEvents()
    {
      $("#divTabSites-List-Toolbar-AddSite").on('click', () =>
      {
        $("#divSite-Label").html("Add New Site");
        $("#divSite-shortName").val("");
        $("#divSite-displayName").val("");
        $("#divSite-physicalPath").val($("#divSite-physicalPath").data("default"));
        $("#divSite-Save").data("id", null);
        $("#divSite").modal('show');
      });

      $("#divSite-Save").on('click', () =>
      {
        let request = {};
        let url = "/api/website";

        request.shortName = $("#divSite-shortName").val();
        request.displayName = $("#divSite-displayName").val();
        request.physicalPath = $("#divSite-physicalPath").val();

        // validate.
        if (request.shortName == "" || request.name == "" || request.physicalPath == "")
        {
          Swal.fire(
            {
              icon: 'error',
              title: 'Oops...',
              text: 'Please fill in all fields!'
            });
          return;
        }

        if ($("#divSite-Save").data("id") != null)
        {
          url += "/" + $("#divSite-Save").data("id");
        }

        $.ajax(
        {
          url: url,
          type: "POST",
          contentType: "application/json",
          data: JSON.stringify(request),
          success: () =>
          {
            Swal.fire(
            {
              icon: 'success',
              title: 'Success',
              text: 'Website added successfully!'
            });

            $("#divSite").modal('hide');
            $("#divTabSites-List").bootstrapTable('refresh');
          },
          error: (xhr) =>
          {
            Swal.fire(
              {
                icon: 'error',
                title: 'Unable to create',
                text: xhr.responseJSON.detail
              });
          }
        });
      });

      $("#divEditSite-Bindings-Toolbar-Add").on('click', () =>
      {
        $("#divAddBinding-Label").html("Add New Binding");
        $("#divAddBinding-hostName").val("");
        $("#divAddBinding-port").val("80");
        $("#divAddBinding").modal("show");
      });
      $("#divEditSite-Bindings-Toolbar-Remove").on('click', () =>
      {
        Swal.fire(
          {
            title: 'Confirm',
            text: "Are you sure you want to remove these bindings?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes!'
          }).then((result) =>
          {
            if (result.isConfirmed)
            {
              let selected = $("#divEditSite-Bindings").bootstrapTable('getSelections');
              let completedDeletions = 0;
              let failedDeletions = 0;

              Swal.fire(
                {
                  title: 'Processing',
                  text: `Removing ${selected.length} bindings...`,
                  allowOutsideClick: false,
                  didOpen: () => 
                  {
                    Swal.showLoading();
                  }
                });

              // Process bindings sequentially
              let deleteNextBinding = (index) =>
              {
                // If we've processed all bindings, show the final message
                if (index >= selected.length) 
                {
                  if (failedDeletions > 0) 
                  {
                    Swal.fire(
                    {
                      title: 'Deletion Incomplete',
                      text: `${completedDeletions} bindings removed successfully. ${failedDeletions} bindings failed to delete.`,
                      icon: 'warning'
                    });
                  } 
                  else
                  {
                    Swal.fire(
                    {
                      title: 'Success',
                      text: `${completedDeletions} bindings removed successfully.`,
                      icon: 'success'
                    });
                  }

                  // Refresh the table to show updated data
                  $("#divEditSite-Bindings").bootstrapTable('refresh');
                  return;
                }

                const binding = selected[index];

                // Update loading message to show progress
                Swal.getContent().querySelector('div.swal2-html-container').textContent = `Removing binding ${index + 1} of ${selected.length}...`;

                $.ajax(
                  {
                    url: '/api/website/binding',
                    type: 'DELETE',
                    data: JSON.stringify(
                    {
                      webSiteBindingId: binding.webSiteBindingId,
                      webSiteId: currentSite.webSiteId
                    }),
                    contentType: 'application/json',
                    success: function() 
                    {
                      completedDeletions++;
                      deleteNextBinding(index + 1);
                      // remove from the table by the websitebindingid
                      $("#divEditSite-Bindings").bootstrapTable('removeByUniqueId', binding.webSiteBindingId);
                    },
                    error: function(xhr, status, error) 
                    {
                      console.error(`Failed to delete binding: ${error}`);
                      failedDeletions++;
                      deleteNextBinding(index + 1);
                    }
                  });
              };

              deleteNextBinding(0);
            }
          });
      });
      $("#divEditSite-Bindings-Toolbar-SSL").on('click', () =>
      {
        let selected = $("#divEditSite-Bindings").bootstrapTable('getSelections');
        let request = {};

        request.webSiteBindingIds = [];
        request.webSiteId = currentSite.webSiteId;

        for (var item in selected)
        {
          item = selected[item];
          if (item.protocol == "http")
          {
            request.webSiteBindingIds.push(item.webSiteBindingId);
          }
        }

        Swal.fire(
          {
            title: 'Processing',
            text: `Securing ${selected.length} bindings...`,
            allowOutsideClick: false,
            didOpen: () =>
            {
              Swal.showLoading();
            }
          });

        $.ajax(
          {
            url: "/api/website/securebindings",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(request),
            success: (data) =>
            {
              Swal.fire(
                {
                  title: 'Success',
                  text: `${data.subjectAlternativeNames.length} bindings secured successfully.`,
                  icon: 'success'
                });

              $("#divEditSite-Bindings").bootstrapTable('load', data.bindings);
            },
            error: (xhr) =>
            {
              Swal.fire(
                {
                  icon: 'error',
                  title: 'Unable to create',
                  text: xhr.responseJSON.detail
                });
            }
          });
      });

      $("#divAddBinding-Add").on('click', () =>
      {
        let request = {};
        request.hostName = $("#divAddBinding-hostName").val();
        request.port = $("#divAddBinding-port").val();
        request.protocol = "http";
        request.webSiteId = currentSite.webSiteId;

        // check hostname is not empty and has no spaces.
        if (request.hostName == "" || request.hostName.indexOf(" ") != -1)
        {
          Swal.fire(
            {
              icon: 'error',
              title: 'Oops...',
              text: 'Hostname is required.'
            });
          return;
        }

        $.ajax(
          {
            url: "/api/website/binding",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(request),
            success: (data) =>
            {
              Swal.fire(
                {
                  icon: 'success',
                  title: 'Success',
                  text: 'Binding added successfully!'
                });
              $("#divAddBinding").modal('hide');

              // add the response to the table
              $("#divEditSite-Bindings").bootstrapTable('append', data);
              // append it to the current site object.
              currentSite.bindings.push(data);
            },
            error: (xhr) =>
            {
              Swal.fire(
                {
                  icon: 'error',
                  title: 'Unable to create',
                  text: xhr.responseJSON.detail
                });
            }
          });
      });

      setupCertificateEvents();
    }
    
    function setupCertificateEvents() 
    {
      var currentCertificate = null;

      $("#divTabCertificates-List").on('click-row.bs.table', function(e, row, element) 
      {
        currentCertificate = row;

        // Populate modal fields
        $("#divCertificateDetails-Label").html("Certificate Details: " + row.commonName);
        $("#divCertificateDetails-commonName").val(row.commonName);
        $("#divCertificateDetails-san").val(row.subjectAlternativeNames);
        $("#divCertificateDetails-status").val(row.status);
        $("#divCertificateDetails-expirationDate").val(formatDate(row.expiratonDate));
        $("#divCertificateDetails-id").val(row.certificateId);
        $("#divCertificateDetails-Renew").prop('disabled', row.status === "Valid");
        $("#divCertificateDetails").modal('show');
      });

      // Renew button click handler
      $("#divCertificateDetails-Renew").on('click', function() 
      {
        if (!currentCertificate) return;

        Swal.fire(
          {
            title: 'Confirm Renewal',
            text: "Are you sure you want to renew this certificate?",
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: 'Yes, renew it!'
          }).then((result) => 
          {
            if (result.isConfirmed) 
            {
              // Show loading state
              Swal.fire(
                {
                  title: 'Processing',
                  text: 'Renewing certificate...',
                  allowOutsideClick: false,
                  didOpen: () => {
                    Swal.showLoading();
                  }
                });

              // Send renewal request
              $.ajax(
                {
                  url: `/api/certificate/${currentCertificate.certificateRequestId}/renew`,
                  type: "POST",
                  contentType: "application/json",
                  success: (data) => 
                  {
                    Swal.fire(
                      {
                        icon: 'success',
                        title: 'Success',
                        text: 'Certificate renewed successfully!'
                      });
                    $("#divCertificateDetails").modal('hide');
                    $("#divTabCertificates-List").bootstrapTable('refresh');
                  },
                  error: (xhr) => 
                  {
                    Swal.fire(
                      {
                        icon: 'error',
                        title: 'Unable to Renew',
                        text: xhr.responseJSON?.detail || 'An error occurred while renewing the certificate.'
                      });
                  }
                });
            }
          });
      });

      // Delete button click handler
      $("#divCertificateDetails-Delete").on('click', function() 
      {
        if (!currentCertificate) return;

        Swal.fire(
          {
            title: 'Confirm Deletion',
            text: "Are you sure you want to delete this certificate? This action cannot be undone.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!',
            confirmButtonColor: '#d33'
          }).then((result) => 
          {
            if (result.isConfirmed)
            {
              Swal.fire(
                {
                  title: 'Processing',
                  text: 'Deleting certificate...',
                  allowOutsideClick: false,
                  didOpen: () => {
                    Swal.showLoading();
                  }
                });

              $.ajax(
                {
                  url: "/api/certificate/" + currentCertificate.certificateRequestId,
                  type: "DELETE",
                  contentType: "application/json",
                  success: () => {
                    Swal.fire({
                      icon: 'success',
                      title: 'Deleted',
                      text: 'Certificate deleted successfully!'
                    });

                    // Close the modal and refresh certificates table
                    $("#divCertificateDetails").modal('hide');
                    $("#divTabCertificates-List").bootstrapTable('refresh');
                  },
                  error: (xhr) => {
                    Swal.fire({
                      icon: 'error',
                      title: 'Unable to Delete',
                      text: xhr.responseJSON?.detail || 'An error occurred while deleting the certificate.'
                    });
                  }
                });
            }
          });
      });
    }

    // Helper function to format dates if not already defined
    function formatDate(dateString) 
    {
      if (!dateString) return "";

      const date = new Date(dateString);
      return date.toLocaleDateString() + " " + date.toLocaleTimeString();
    }

    function setupTables()
    {
      let bindingsTableCheckEvent = (row) =>
      {
        let checked = $("#divEditSite-Bindings").bootstrapTable('getSelections');
        let hasSecured = false;

        // check the list to see if are any http bindings.. if so set hasUnsecured
        for (let i = 0; i < checked.length; i++)
        {
          if (checked[i].protocol == "https")
          {
            hasSecured = true;
            break;
          }
        }

        $("#divEditSite-Bindings-Toolbar-SSL").prop('disabled', hasSecured || (checked.length == 0));
        $("#divEditSite-Bindings-Toolbar-Remove").prop('disabled', checked.length == 0);
      };

      $("#divTabSites-List").bootstrapTable(
      {
        columns: 
        [
          { field: "webSiteId", title: "ID", sortable: true },
          { field: "shortName", title: "Shortname", sortable: true },
          { field: "name", title: "Name", sortable: true },
          { field: "bindingCount", title: "# Bindings", sortable: true }
        ],
        url: "/api/website",
        method: "get",
        sort : true,
        search: true,
        toolbar: "#divTabSites-List-Toolbar",
        onClickRow: (row) =>
        {
          $("#divEditSite-Label").html("Editing Site");
          $("#divEditSite-shortName").val(row.shortName);
          $("#divEditSite-displayName").val(row.name);
          $("#divEditSite-physicalPath").val(row.physicalPath);
          $("#divEditSite-Save").data("id", row.webSiteId);
          $("#divEditSite").modal('show');

          $("#divEditSite-Bindings").bootstrapTable("load", row.bindings);
          $("#divEditSite-Bindings-Toolbar-SSL").prop('disabled', true);
          $("#divEditSite-Bindings-Toolbar-Remove").prop('disabled', true);
          currentSite = row;
        }
      });

      $("#divTabCertificates-List").bootstrapTable(
        {
          columns: 
          [
            { field: "commonName", title: "Primary Domain", sortable: true, formatter: (val, row) =>
            {
              let result = val;
              if (row.subjectAlternativeNames.length > 0)
              {
                result += "<br/><small>(" + row.subjectAlternativeNames + ")</small>";
              }

              return result;
            }},
            { field: "status", title: "Status", sortable: true },
            { field: "expiratonDate", title: "Expiration Date", formatter: formatterDate, sortable: true }
          ],
          url: "/api/certificate",
          search: true,
          showRefresh: true,
          clickToSelect: true  // Add this to make rows clickable
        });

      $("#divEditSite-Bindings").bootstrapTable(
        {
          columns:
          [
            { checkbox: true },
            { field: "hostName", title: "Binding", sortable: true, formatter : (val, row) => 
              {
                let binding = row.protocol + "://" + row.hostName;

                if (row.port != 80 && row.port != 443)
                {
                  binding += ":" + row.port;
                }

                return binding;
              } 
            }
          ],
          toolbar: "#divEditSite-Bindings-Toolbar",
          search: true,
          sort: true,
          pagination: true,
          checkboxHeader: false,
          onCheck: bindingsTableCheckEvent,
          onUncheck: bindingsTableCheckEvent,
          uniqueId: "webSiteBindingId"
        }
      )
    }
  </script>
}

<h1>IIS Manager</h1>

<ul class="nav nav-tabs" id="tabList">
  <li class="nav-item" role="presentation">
    <button class="nav-link active" id="divTabSites-Link" data-bs-toggle="tab" data-bs-target="#divTabSites" type="button" role="tab" aria-controls="home-tab-pane" aria-selected="true">Web Sites</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="divTabCertificates-Link" data-bs-toggle="tab" data-bs-target="#divTabCertificates" type="button" role="tab" aria-controls="home-tab-pane" aria-selected="true">Certificates</button>
  </li>
</ul>

<div class="tab-content" id="myTabContent">
  <div class="tab-pane fade show active pt-2" id="divTabSites" role="tabpanel" aria-labelledby="home-tab" tabindex="0">
    <div id="divTabSites-List-Toolbar" class="btn-group">
      <button id="divTabSites-List-Toolbar-AddSite" class="btn-primary btn"><i class="bi bi-plus-circle"></i> Add New Site</button>
    </div>
    <table id="divTabSites-List"></table>
  </div>

  <div class="tab-pane fade show pt-2" id="divTabCertificates" role="tabpanel" aria-labelledby="home-tab" tabindex="0">
    <table id="divTabCertificates-List"></table>
  </div>
</div>

<div class="modal fade" id="divSite" tabindex="-1" aria-labelledby="divSite" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="divSite-Label">Add New Website</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label for="divSite-shortName" class="form-label">Short Name <small>(alphanumeric only)</small></label>
          <input type="text" class="form-control" id="divSite-shortName" required>
        </div>
        <div class="mb-3">
          <label for="divSite-displayName" class="form-label">Display Name</label>
          <input type="text" class="form-control" id="divSite-displayName" required>
        </div>
        <div class="mb-3">
          <label for="divSite-physicalPath" class="form-label">Path</label>
          <input type="text" class="form-control" id="divSite-physicalPath" required data-default="@Techie.IISManager.Global.SitesFolder">
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="divSite-Save">Save</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="divEditSite" tabindex="-1" aria-labelledby="divEditSite" aria-hidden="true">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="divEditSite-Label">Edit Website</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="row">
          <div class="col-3">
            <div class="mb-3">
              <label for="divEditSite-shortName" class="form-label">Short Name <small>(alphanumeric only)</small></label>
              <input type="text" class="form-control" id="divEditSite-shortName" required>
            </div>
            <div class="mb-3">
              <label for="divEditSite-displayName" class="form-label">Display Name</label>
              <input type="text" class="form-control" id="divEditSite-displayName" required>
            </div>
            <div class="mb-3">
              <label for="divEditSite-physicalPath" class="form-label">Path</label>
              <input type="text" class="form-control" id="divEditSite-physicalPath" required data-default="@Techie.IISManager.Global.SitesFolder">
            </div>
          </div>
          <div class="col-9">
            <div id="divEditSite-Bindings-Toolbar" class="btn-group">
              <button id="divEditSite-Bindings-Toolbar-Add" class="btn-primary btn"><i class="bi bi-plus-circle"></i> Add</button>
              <button id="divEditSite-Bindings-Toolbar-SSL" class="btn-info btn"><i class="bi bi-lock"></i> SSL</button>
              <button id="divEditSite-Bindings-Toolbar-Remove" class="btn-danger btn"><i class="bi bi-x-circle"></i> Remove</button>
            </div>
            <table id="divEditSite-Bindings"></table>
          </div>
        </div>
          
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="divAddBinding" tabindex="-1" aria-labelledby="divAddBinding" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="divSite-Label">Add New Binding</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label for="divAddBinding-hostName" class="form-label">Hostname</label>
          <input type="text" class="form-control" id="divAddBinding-hostName" required>
        </div>
        <div class="mb-3">
          <label for="divAddBinding-port" class="form-label">Port</label>
          <input type="text" class="form-control" id="divAddBinding-port" required>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="divAddBinding-Add">Add</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="divCertificateDetails" tabindex="-1" aria-labelledby="divCertificateDetails" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="divCertificateDetails-Label">Certificate Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="row">
          <div class="col-12">
            <div class="mb-3">
              <label class="form-label">Common Name</label>
              <input type="text" class="form-control" id="divCertificateDetails-commonName" readonly>
            </div>
            <div class="mb-3">
              <label class="form-label">Subject Alternative Names</label>
              <textarea class="form-control" id="divCertificateDetails-san" rows="3" readonly></textarea>
            </div>
            <div class="row">
              <div class="col-6">
                <div class="mb-3">
                  <label class="form-label">Status</label>
                  <input type="text" class="form-control" id="divCertificateDetails-status" readonly>
                </div>
              </div>
              <div class="col-6">
                <div class="mb-3">
                  <label class="form-label">Expiration Date</label>
                  <input type="text" class="form-control" id="divCertificateDetails-expirationDate" readonly>
                </div>
              </div>
            </div>
            <div class="mb-3">
              <label class="form-label">Certificate ID</label>
              <input type="text" class="form-control" id="divCertificateDetails-id" readonly>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-success" id="divCertificateDetails-Renew">Renew</button>
        <button type="button" class="btn btn-danger" id="divCertificateDetails-Delete">Delete</button>
      </div>
    </div>
  </div>
</div>